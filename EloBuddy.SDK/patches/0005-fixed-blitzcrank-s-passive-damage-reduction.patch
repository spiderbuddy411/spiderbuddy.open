From 3fa000c7ee60806d79d8edef5cf74c4d1f3e9fcc Mon Sep 17 00:00:00 2001
From: Javier <jachicao@uc.cl>
Date: Fri, 5 Feb 2016 17:40:50 -0300
Subject: [PATCH 5/8] fixed blitzcrank's passive damage reduction

---
 EloBuddy.SDK/Damage.cs     |  6 ------
 EloBuddy.SDK/Extensions.cs | 16 +++++++++++++++-
 EloBuddy.SDK/Orbwalker.cs  | 10 +++++-----
 3 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/EloBuddy.SDK/Damage.cs b/EloBuddy.SDK/Damage.cs
index 17f37dd..30cb0da 100644
--- a/EloBuddy.SDK/Damage.cs
+++ b/EloBuddy.SDK/Damage.cs
@@ -1455,12 +1455,6 @@ namespace EloBuddy.SDK
                             flatReceived -= 2f * (int)((targetHero.Level + 2f) / 3f) + 2f;
                         }
                         break;
-                    case Champion.Blitzcrank:
-                        if (!target.HasBuff("BlitzcrankManaBarrierCD") && !target.HasBuff("ManaBarrier"))
-                        {
-                            flatReceived -= target.Mana / 2;
-                        }
-                        break;
                 }
 
                 #endregion
diff --git a/EloBuddy.SDK/Extensions.cs b/EloBuddy.SDK/Extensions.cs
index 744c376..b1e619b 100644
--- a/EloBuddy.SDK/Extensions.cs
+++ b/EloBuddy.SDK/Extensions.cs
@@ -858,7 +858,21 @@ namespace EloBuddy.SDK
 
         public static float TotalShield(this Obj_AI_Base target)
         {
-            return target.AllShield + target.AttackShield + target.MagicShield;
+            var result = target.AllShield + target.AttackShield + target.MagicShield;
+            var hero = target as AIHeroClient;
+            if (hero != null)
+            {
+                switch (hero.Hero)
+                {
+                    case Champion.Blitzcrank:
+                        if (!target.HasBuff("BlitzcrankManaBarrierCD") && !target.HasBuff("ManaBarrier"))
+                        {
+                            result += target.Mana / 2;
+                        }
+                        break;
+                }
+            }
+            return result;
         }
 
         public static float TotalShieldHealth(this Obj_AI_Base target)
diff --git a/EloBuddy.SDK/Orbwalker.cs b/EloBuddy.SDK/Orbwalker.cs
index b0012a1..b9f57f4 100644
--- a/EloBuddy.SDK/Orbwalker.cs
+++ b/EloBuddy.SDK/Orbwalker.cs
@@ -132,7 +132,7 @@ namespace EloBuddy.SDK
                 }
                 return Core.GameTickCount - _lastAutoAttackSent > 175 &&
                        ((!ParanoidMode && !_autoAttackStarted) ||
-                        Core.GameTickCount + InternalPing - LastAutoAttack + 25 >=
+                        Core.GameTickCount - LastAutoAttack + 80 >=
                         Player.Instance.AttackDelay * 1000) && !Player.Instance.Spellbook.IsChanneling;
             }
             internal set
@@ -158,7 +158,7 @@ namespace EloBuddy.SDK
 
         public static bool CanBeAborted
         {
-            get { return _autoAttackCompleted || Core.GameTickCount + InternalPing - LastAutoAttack >= Player.Instance.AttackCastDelay * 1000 + 300; }
+            get { return _autoAttackCompleted || Core.GameTickCount - LastAutoAttack >= Player.Instance.AttackCastDelay * 1000 + 300; }
         }
 
         public static bool IsAutoAttacking
@@ -1261,7 +1261,7 @@ namespace EloBuddy.SDK
                 var value = pair.Value;
                 var minion = value.Handle;
                 // Check if minion is unkillable
-                if (pair.Value.IsUnkillable)
+                if (value.IsUnkillable)
                 {
                     if (!minion.IdEquals(LastTarget))
                     {
@@ -1319,7 +1319,7 @@ namespace EloBuddy.SDK
                         {
                             CurrentMinionsLists[entry.Key] =
                                 entry.Value.OrderByDescending(
-                                    minion => FreezePriority ? CurrentMinionValues[minion.NetworkId].LaneClearHealth : (1 / CurrentMinionValues[minion.NetworkId].LaneClearHealth)).ToList();
+                                    minion => FreezePriority ? CurrentMinionValues[minion.NetworkId].LaneClearHealth : 1 / CurrentMinionValues[minion.NetworkId].LaneClearHealth).ToList();
                             LaneClearMinion = entry.Value.FirstOrDefault(Player.Instance.IsInAutoAttackRange);
                         }
                         break;
@@ -1363,7 +1363,7 @@ namespace EloBuddy.SDK
             {
                 get
                 {
-                    var health = (Handle.HasTurretTargetting() ? LastHitHealth : LaneClearHealth);
+                    var health = Handle.HasTurretTargetting() ? LastHitHealth : LaneClearHealth;
                     return health <= GetAutoAttackDamage(Handle) && health < Handle.Health;
                 }
             }
-- 
1.9.4.msysgit.2

